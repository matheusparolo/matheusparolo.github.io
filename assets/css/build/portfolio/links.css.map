{"version":3,"sources":["../../../node_modules/stylus/lib/functions/index.styl","portfolio/links.styl","portfolio/links.css"],"names":[],"mappings":"AAqIkB,+DCxHhB,iBCb8E,CDc9E,UCdyF,CDezF,WCfqG,CDiBrG,iBCjBuH,CDkBvH,cClBsI,CDmBtI,gCCnB+J,CDmB/J,wBCnB+J,CDqB/J,SCrByK,CDsBzK,QCtBkL,CDwB5J,yBD6GN,+DC5Gd,YCzBqR,CD0BrR,WC1BiS,CD2BjS,cC3BgT,CD4BhT,YC5B6T,CD6B7T,wBC7BgV,CD6BhV,qBC7BgV,CD6BhV,kBC7BgV,CD8BhV,SAAA,CAAA,CAGJ,WACE,wBClCiY,CDmCjY,sBCnCwZ,CDoCxZ,kBCpC2a,CDqC3a,iBCrC6b,CDsC7b,gBCtC8c,CDuCvb,yBAAA,WACrB,eCxCggB,CDyChgB,YAAA,CAAA,CAGJ,YACE,UC7CuiB,CD+CviB,mBACE,eChDwkB,CDiDxkB,iBCjD0lB,CDkD1lB,YClDumB,CDmDvmB,cCnDsnB,CDoDtnB,eCpDsoB,CDqDtoB,mECrD0sB,CDsD1sB,kBCtD6tB,CDwDvsB,yBAAA,mBACpB,YAAA,CAAA,CACF,0BACE,WC3D2zB,CD4D3zB,aC5Dy0B,CD6Dz0B,UC7Do1B,CD8Dp1B,qBC9D02B,CD+D12B,UC/Dq3B,CDgEr3B,aChEm4B,CDoEz4B,kBACE,WCrEq6B,CDuEr6B,qBACE,cCxEu8B,CDyEv8B,eCzEu9B,CD0Ej8B,yBAAA,qBACpB,SAAA,CAAA,CACF,2BACE,YC7EsjC,CDgF1jC,wBACE,iBCjFkmC,CDkFlmC,WClF8mC,CDmF9mC,YCnF2nC,CDQ7nC,kBCR2oC,CDQ3oC,aCR2oC,CDS3oC,iBCT6pC,CDqF3pC,cCrF0qC,CDsF1qC,SCtForC,CDuFprC,UCvF+rC,CDwF/rC,eCxF+sC,CDyF/sC,cCzF8tC,CD0F9tC,8BC1FqvC,CD0FrvC,sBC1FqvC,CD2FrvC,qBC3F2wC,CD6F3wC,gCAzFF,8BCJ40C,CDK50C,aCL01C,CDgGt1C,gBChGu2C,CDqGv2C,gCCrGw4C,CDkGl3C,yBAAA,gCACpB,gBAAA,CAAA,CAIJ,+BAnGF,wBCJ+gD,CDK/gD,UCL0hD,CD2GthD,MC3G6hD,CD4G7hD,gBC5G8iD,CD6GxhD,yBAAA,+BACpB,iBC9GsnD,CD+GtnD,mBC/G0oD,CDgH1oD,KAAA,CAAA,CAEY,2EAEd,SCpHwuD,CDsH1uD,4BACE,UCvH+wD,CDwH/wD,WCxH2xD,CDyH3xD,mBAAA,CAAA,gBCzH4yD,CD4H9yD,2BApHF,kBCRw1D,CDQx1D,YCRw1D,CDSx1D,gBCTy2D,CD8Hr2D,aC9Hm3D,CD+Hn3D,WC/H+3D,CDkIj4D,2BA1HF,kBCRk7D,CDQl7D,mBCRk7D,CDSl7D,uBCT08D,CDoIt8D,oBCpI29D,CDqI39D,WCrIu+D","file":"links.css","sourcesContent":["called-from = ()\n\nvendors = moz webkit o ms official\n\n// stringify the given arg\n\n-string(arg)\n  type(arg) + ' ' + arg\n\n// require a color\n\nrequire-color(color)\n  unless color is a 'color'\n    error('RGB or HSL value expected, got a ' + -string(color))\n\n// require a unit\n\nrequire-unit(n)\n  unless n is a 'unit'\n    error('unit expected, got a ' + -string(n))\n\n// require a string\n\nrequire-string(str)\n  unless str is a 'string' or str is a 'ident'\n    error('string expected, got a ' + -string(str))\n\n// Math functions\n\nabs(n) { math(n, 'abs') }\nmin(a, b) { a < b ? a : b }\nmax(a, b) { a > b ? a : b }\n\n// Trigonometrics\nPI = -math-prop('PI')\n\nradians-to-degrees(angle)\n  angle * (180 / PI)\n\ndegrees-to-radians(angle)\n  unit(angle * (PI / 180),'')\n\nsin(n)\n  n = degrees-to-radians(n) if unit(n) == 'deg'\n  round(math(n, 'sin'), 9)\n\ncos(n)\n  n = degrees-to-radians(n) if unit(n) == 'deg'\n  round(math(n, 'cos'), 9)\n\n// Rounding Math functions\n\nceil(n, precision = 0)\n  multiplier = 10 ** precision\n  math(n * multiplier, 'ceil') / multiplier\n\nfloor(n, precision = 0)\n  multiplier = 10 ** precision\n  math(n * multiplier, 'floor') / multiplier\n\nround(n, precision = 0)\n  multiplier = 10 ** precision\n  math(n * multiplier, 'round') / multiplier\n\n// return the sum of the given numbers\n\nsum(nums)\n  sum = 0\n  sum += n for n in nums\n\n// return the average of the given numbers\n\navg(nums)\n  sum(nums) / length(nums)\n\n// return a unitless number, or pass through\n\nremove-unit(n)\n  if typeof(n) is \"unit\"\n    unit(n, \"\")\n  else\n    n\n\n// convert a percent to a decimal, or pass through\n\npercent-to-decimal(n)\n  if unit(n) is \"%\"\n    remove-unit(n) / 100\n  else\n    n\n\n// check if n is an odd number\n\nodd(n)\n  1 == n % 2\n\n// check if n is an even number\n\neven(n)\n  0 == n % 2\n\n// check if color is light\n\nlight(color)\n  lightness(color) >= 50%\n\n// check if color is dark\n\ndark(color)\n  lightness(color) < 50%\n\n// desaturate color by amount\n\ndesaturate(color, amount)\n  adjust(color, 'saturation', - amount)\n\n// saturate color by amount\n\nsaturate(color = '', amount = 100%)\n  if color is a 'color'\n    adjust(color, 'saturation', amount)\n  else\n    unquote( \"saturate(\" + color + \")\" )\n\n// darken by the given amount\n\ndarken(color, amount)\n  adjust(color, 'lightness', - amount)\n\n// lighten by the given amount\n\nlighten(color, amount)\n  adjust(color, 'lightness', amount)\n\n// decrease opacity by amount\n\nfade-out(color, amount)\n  color - rgba(black, percent-to-decimal(amount))\n\n// increase opacity by amount\n\nfade-in(color, amount)\n  color + rgba(black, percent-to-decimal(amount))\n\n// spin hue by a given amount\n\nspin(color, amount)\n  color + unit(amount, deg)\n\n// mix two colors by a given amount\n\nmix(color1, color2, weight = 50%)\n  unless weight in 0..100\n    error(\"Weight must be between 0% and 100%\")\n\n  if length(color1) == 2\n    weight = color1[0]\n    color1 = color1[1]\n\n  else if length(color2) == 2\n    weight = 100 - color2[0]\n    color2 = color2[1]\n\n  require-color(color1)\n  require-color(color2)\n\n  p = unit(weight / 100, '')\n  w = p * 2 - 1\n\n  a = alpha(color1) - alpha(color2)\n\n  w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2\n  w2 = 1 - w1\n\n  channels = (red(color1) red(color2)) (green(color1) green(color2)) (blue(color1) blue(color2))\n  rgb = ()\n\n  for pair in channels\n    push(rgb, floor(pair[0] * w1 + pair[1] * w2))\n\n  a1 = alpha(color1) * p\n  a2 = alpha(color2) * (1 - p)\n  alpha = a1 + a2\n\n  rgba(rgb[0], rgb[1], rgb[2], alpha)\n\n// invert colors, leave alpha intact\n\ninvert(color = '')\n  if color is a 'color'\n    rgba(#fff - color, alpha(color))\n  else\n    unquote( \"invert(\" + color + \")\" )\n\n// give complement of the given color\n\ncomplement( color )\n  spin( color, 180 )\n\n// give grayscale of the given color\n\ngrayscale( color = '' )\n  if color is a 'color'\n    desaturate( color, 100% )\n  else\n    unquote( \"grayscale(\" + color + \")\" )\n\n// mix the given color with white\n\ntint( color, percent )\n  mix( white, color, percent )\n\n// mix the given color with black\n\nshade( color, percent )\n  mix( black, color, percent )\n\n// return the last value in the given expr\n\nlast(expr)\n  expr[length(expr) - 1]\n\n// return keys in the given pairs or object\n\nkeys(pairs)\n  ret = ()\n  if type(pairs) == 'object'\n    for key in pairs\n      push(ret, key)\n  else\n    for pair in pairs\n      push(ret, pair[0]);\n  ret\n\n// return values in the given pairs or object\n\nvalues(pairs)\n  ret = ()\n  if type(pairs) == 'object'\n    for key, val in pairs\n      push(ret, val)\n  else\n    for pair in pairs\n      push(ret, pair[1]);\n  ret\n\n// join values with the given delimiter\n\njoin(delim, vals...)\n  buf = ''\n  vals = vals[0] if length(vals) == 1\n  for val, i in vals\n    buf += i ? delim + val : val\n\n// add a CSS rule to the containing block\n\n// - This definition allows add-property to be used as a mixin\n// - It has the same effect as interpolation but allows users\n//   to opt for a functional style\n\nadd-property-function = add-property\nadd-property(name, expr)\n  if mixin\n    {name} expr\n  else\n    add-property-function(name, expr)\n\nprefix-classes(prefix)\n  -prefix-classes(prefix, block)\n\n// Caching mixin, use inside your functions to enable caching by extending.\n\n$stylus_mixin_cache = {}\ncache()\n  $key = (current-media() or 'no-media') + '__' + called-from[0] + '__' + arguments\n  if $key in $stylus_mixin_cache\n    @extend {\"$cache_placeholder_for_\" + $stylus_mixin_cache[$key]}\n  else if 'cache' in called-from\n    {block}\n  else\n    $id = length($stylus_mixin_cache)\n\n    &,\n    /$cache_placeholder_for_{$id}\n      $stylus_mixin_cache[$key] = $id\n      {block}\n\n// Percentage function to convert a number, e.g. \".45\", into a percentage, e.g. \"45%\"\n\npercentage(num)\n  return unit(num * 100, '%')\n\n// Returns the position of a `value` within a `list`\n\nindex(list, value)\n  for val, i in list\n    return i if val == value\n","$darkgray = #2A2D34\n\n// Mixins\nlinks-info(attr, color)\n  content: attr\n  color: color\n\nflex()\n  flex: arguments;\n  -ms-flex: arguments\n\n// Placeholders\n$links-info\n  position: absolute\n  width: 100%\n  height: 80px;\n\n  text-align center\n  font-size: 22px;\n  transition-duration .15s\n\n  opacity 1\n  bottom:0\n\n  @media(min-width 768px)\n    bottom: unset\n    height: 100%\n    font-size 18px\n    display: grid\n    align-items center\n    opacity 0\n\n\n#portfolio\n  background-color: $darkgray;\n  height unset!important\n  overflow-y: visible;\n  overflow-x: hidden;\n  min-height: 100vh;\n  @media(min-width  768px)\n    overflow hidden\n    height 100vh\n\n// Code\n.links--div\n  color: white\n\n  .title\n    margin: auto 0 0 0\n    text-align: center;\n    padding: 10px;\n    font-size: 32px;\n    font-weight: normal;\n    font-family  \"Open Sans\",\"helvetica neue\", helvetica, Arial, sans-serif;\n    letter-spacing 2px\n\n    @media(min-width 768px)\n      display: none\n    &::after\n      width 210px\n      margin: 0 auto\n      height: 1px\n      background-color white\n      content: \"\"\n      display block\n\n\n\n.portfolio--links\n  height 100%\n\n  &.xs\n    padding: 60px 0;\n    margin: 0 0 auto 0\n    @media(min-width 576px)\n      padding: 0;\n    .link\n      height unset\n\n\n  .link\n    position relative\n    width: 100vw\n    height 100vh\n    flex: 0 0 100%;\n    max-width: 100%;\n    padding: 0\n    float: left\n    overflow hidden\n    cursor pointer\n    animation opacity .25s\n    background-color: white\n\n    &::before\n      @extend $links-info\n      links-info(\"Ver \" attr(data-type), rgb(200,200,200))\n      padding-top: 35px\n\n      @media(min-width 768px)\n        padding-top: 30px\n\n      background-color rgba(0,0,0,.85)\n\n    &::after\n      @extend $links-info\n      links-info(attr(data-title), white)\n\n      left: 0\n      padding-top: 10px\n      @media(min-width 768px)\n        padding-top: unset\n        padding-bottom: 30px\n        top: 0\n\n    &:hover::before,\n    &:hover::after\n      opacity 1\n\n    img\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n\n  &.md\n    .link\n      flex: 0 0 50%;\n      max-width: 50%;\n      height: 50vh\n\n  &.lg\n    .link\n      flex: 0 0 33.333333%;\n      max-width: 33.333333%;\n      height: 50vh\n",".portfolio--links .link::after,.portfolio--links .link::before{position:absolute;width:100%;height:80px;text-align:center;font-size:22px;transition-duration:.15s;opacity:1;bottom:0}@media (min-width:768px){.portfolio--links .link::after,.portfolio--links .link::before{bottom:unset;height:100%;font-size:18px;display:grid;align-items:center;opacity:0}}#portfolio{background-color:#2a2d34;height:unset!important;overflow-y:visible;overflow-x:hidden;min-height:100vh}@media (min-width:768px){#portfolio{overflow:hidden;height:100vh}}.links--div{color:#fff}.links--div .title{margin:auto 0 0;text-align:center;padding:10px;font-size:32px;font-weight:400;font-family:\"Open Sans\",\"helvetica neue\",helvetica,Arial,sans-serif;letter-spacing:2px}@media (min-width:768px){.links--div .title{display:none}}.links--div .title::after{width:210px;margin:0 auto;height:1px;background-color:#fff;content:\"\";display:block}.portfolio--links{height:100%}.portfolio--links.xs{padding:60px 0;margin:0 0 auto}@media (min-width:576px){.portfolio--links.xs{padding:0}}.portfolio--links.xs .link{height:unset}.portfolio--links .link{position:relative;width:100vw;height:100vh;flex:0 0 100%;-ms-flex:0 0 100%;max-width:100%;padding:0;float:left;overflow:hidden;cursor:pointer;animation:opacity .25s;background-color:#fff}.portfolio--links .link::before{content:\"Ver \" attr(data-type);color:#c8c8c8;padding-top:35px;background-color:rgba(0,0,0,.85)}@media (min-width:768px){.portfolio--links .link::before{padding-top:30px}}.portfolio--links .link::after{content:attr(data-title);color:#fff;left:0;padding-top:10px}@media (min-width:768px){.portfolio--links .link::after{padding-top:unset;padding-bottom:30px;top:0}}.portfolio--links .link:hover::after,.portfolio--links .link:hover::before{opacity:1}.portfolio--links .link img{width:100%;height:100%;object-fit:cover}.portfolio--links.md .link{flex:0 0 50%;-ms-flex:0 0 50%;max-width:50%;height:50vh}.portfolio--links.lg .link{flex:0 0 33.333333%;-ms-flex:0 0 33.333333%;max-width:33.333333%;height:50vh}"]}