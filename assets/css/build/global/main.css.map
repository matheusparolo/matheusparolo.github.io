{"version":3,"sources":["global/main.css","global/main.styl","../../../node_modules/stylus/lib/functions/index.styl"],"names":[],"mappings":"AAAsD,2BCuEpD,GACE,SDxEyF,CCyE3F,GACE,YAAA,CAAA,CD1E+J,mBCuEjK,GACE,SDxE8L,CCyEhM,GACE,YAAA,CAAA,CCAY,wBDzEd,mCAAA,CAAA,2BDDqQ,CCGvQ,UAEE,eDL+R,CCOjS,KACE,qFDR0X,CCU1X,iCDV4Z,CCY9Z,uBACE,QDb4b,CCe9b,GACE,SDhByc,CCkB3c,EACE,8BDnB0e,CCwB5e,gBACE,iBDzB4gB,CC2B9gB,MACE,cD5BiiB,CC6BjiB,wBD7B0jB,CC8B1jB,UD9BqkB,CC+BrkB,YD/BklB,CCkCplB,UACE,YDnCymB,CCoCzmB,iBDpC2nB,CCqC3nB,eDrC2oB,CCsC3oB,yBDtC6pB,CCsC7pB,iBDtC6pB,CCuC7pB,+BDvCqrB,CCuCrrB,uBDvCqrB,CCwCrrB,cDxCosB,CC0CpsB,mBACE,iBD3CuuB,CC4CvuB,YD5CovB,CC+CtvB,0BACE,UDhDyxB,CCiDzxB,iBDjD2yB,CCkD3yB,KDlDizB,CCmDjzB,ODnDyzB,CCoDzzB,QDpDk0B,CCqDl0B,MDrDy0B,CCsDz0B,6CDtD+2B,CCsD/2B,qCDtD+2B,CCuD/2B,UDvD03B,CCwD13B,8BDxDi5B,CCwDj5B,0BDxDi5B,CCwDj5B,sBDxDi5B,CCyDj5B,2BDzD66B,CC0D76B,qBD1Dm8B,CC2Dn8B,wBD3D49B,CC6D99B,kBACE,eD9D8/B,CC+D9/B,SD/DwgC,CCkE5gC,aACE,4DDnEolC","file":"main.css","sourcesContent":["@-moz-keyframes opacity{0%{opacity:0}to{opacity:100%}}@-webkit-keyframes opacity{0%{opacity:0}to{opacity:100%}}@-o-keyframes opacity{0%{opacity:0}to{opacity:100%}}@keyframes opacity{0%{opacity:0}to{opacity:100%}}.parallax__section,main{transform-style:preserve-3d}body,html{overflow:hidden}body{font-family:\"Source Sans Pro\",\"Open Sans\",\"helvetica neue\",helvetica,Arial,sans-serif;text-rendering:optimizeLegibility}h1,h2,h3,h4,h5,h6,p,ul{margin:0}ul{padding:0}a{text-decoration:none!important}#portfolio,body{overflow-x:hidden}.copy{font-size:16px;background-color:#2a2d34;color:#fff;padding:20px}.parallax{height:100vh;overflow-x:hidden;overflow-y:auto;perspective:300px;perspective-origin:100%;font-size:200%}.parallax__section{position:relative;height:100vh}.parallax__dynamic::after{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;transform:translateZ(-300px) scale(2);z-index:-1;transform-origin:100vw;background-repeat:no-repeat;background-size:cover;background-position:left}.parallax__static{background:#fff;z-index:2}#hero::after{background-image:url(/assets/media/img/hero/background.jpeg)}","$preserve-3d\n  transform-style: preserve-3d\n\nbody,\nhtml\n  overflow: hidden\n\nbody\n  font-family: \"Source Sans Pro\", \"Open Sans\",\"helvetica neue\", helvetica, Arial, sans-serif;\n  overflow-x: hidden;\n  text-rendering: optimizeLegibility\n\nh1,h2,h3,h4,h5,h6,ul, p\n  margin: 0\n\nul\n  padding: 0\n\na\n  text-decoration: none!important\n\nmain\n  @extends $preserve-3d\n\n#portfolio\n  overflow-x: hidden\n\n.copy\n  font-size: 16px;\n  background-color: #2a2d34;\n  color: #fff;\n  padding: 20px;\n\n// Parallax\n.parallax\n  height: 100vh\n  overflow-x: hidden\n  overflow-y: auto\n  perspective: 300px\n  perspective-origin: 100%\n  font-size 200%\n\n  &__section\n    position: relative\n    height: 100vh\n    @extends $preserve-3d\n\n  &__dynamic::after\n    content: \"\"\n    position: absolute\n    top: 0\n    right: 0\n    bottom: 0\n    left: 0\n    transform: translateZ(-300px) scale(2)\n    z-index: -1\n    transform-origin: 100vw\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: left;\n\n  &__static\n    background: white\n    z-index: 2\n\n// Images for Effect\n#hero::after\n  background-image: url('/assets/media/img/hero/background.jpeg')\n\n\n@keyframes opacity\n  0%\n    opacity 0\n  100%\n    opacity 100%","called-from = ()\n\nvendors = moz webkit o ms official\n\n// stringify the given arg\n\n-string(arg)\n  type(arg) + ' ' + arg\n\n// require a color\n\nrequire-color(color)\n  unless color is a 'color'\n    error('RGB or HSL value expected, got a ' + -string(color))\n\n// require a unit\n\nrequire-unit(n)\n  unless n is a 'unit'\n    error('unit expected, got a ' + -string(n))\n\n// require a string\n\nrequire-string(str)\n  unless str is a 'string' or str is a 'ident'\n    error('string expected, got a ' + -string(str))\n\n// Math functions\n\nabs(n) { math(n, 'abs') }\nmin(a, b) { a < b ? a : b }\nmax(a, b) { a > b ? a : b }\n\n// Trigonometrics\nPI = -math-prop('PI')\n\nradians-to-degrees(angle)\n  angle * (180 / PI)\n\ndegrees-to-radians(angle)\n  unit(angle * (PI / 180),'')\n\nsin(n)\n  n = degrees-to-radians(n) if unit(n) == 'deg'\n  round(math(n, 'sin'), 9)\n\ncos(n)\n  n = degrees-to-radians(n) if unit(n) == 'deg'\n  round(math(n, 'cos'), 9)\n\n// Rounding Math functions\n\nceil(n, precision = 0)\n  multiplier = 10 ** precision\n  math(n * multiplier, 'ceil') / multiplier\n\nfloor(n, precision = 0)\n  multiplier = 10 ** precision\n  math(n * multiplier, 'floor') / multiplier\n\nround(n, precision = 0)\n  multiplier = 10 ** precision\n  math(n * multiplier, 'round') / multiplier\n\n// return the sum of the given numbers\n\nsum(nums)\n  sum = 0\n  sum += n for n in nums\n\n// return the average of the given numbers\n\navg(nums)\n  sum(nums) / length(nums)\n\n// return a unitless number, or pass through\n\nremove-unit(n)\n  if typeof(n) is \"unit\"\n    unit(n, \"\")\n  else\n    n\n\n// convert a percent to a decimal, or pass through\n\npercent-to-decimal(n)\n  if unit(n) is \"%\"\n    remove-unit(n) / 100\n  else\n    n\n\n// check if n is an odd number\n\nodd(n)\n  1 == n % 2\n\n// check if n is an even number\n\neven(n)\n  0 == n % 2\n\n// check if color is light\n\nlight(color)\n  lightness(color) >= 50%\n\n// check if color is dark\n\ndark(color)\n  lightness(color) < 50%\n\n// desaturate color by amount\n\ndesaturate(color, amount)\n  adjust(color, 'saturation', - amount)\n\n// saturate color by amount\n\nsaturate(color = '', amount = 100%)\n  if color is a 'color'\n    adjust(color, 'saturation', amount)\n  else\n    unquote( \"saturate(\" + color + \")\" )\n\n// darken by the given amount\n\ndarken(color, amount)\n  adjust(color, 'lightness', - amount)\n\n// lighten by the given amount\n\nlighten(color, amount)\n  adjust(color, 'lightness', amount)\n\n// decrease opacity by amount\n\nfade-out(color, amount)\n  color - rgba(black, percent-to-decimal(amount))\n\n// increase opacity by amount\n\nfade-in(color, amount)\n  color + rgba(black, percent-to-decimal(amount))\n\n// spin hue by a given amount\n\nspin(color, amount)\n  color + unit(amount, deg)\n\n// mix two colors by a given amount\n\nmix(color1, color2, weight = 50%)\n  unless weight in 0..100\n    error(\"Weight must be between 0% and 100%\")\n\n  if length(color1) == 2\n    weight = color1[0]\n    color1 = color1[1]\n\n  else if length(color2) == 2\n    weight = 100 - color2[0]\n    color2 = color2[1]\n\n  require-color(color1)\n  require-color(color2)\n\n  p = unit(weight / 100, '')\n  w = p * 2 - 1\n\n  a = alpha(color1) - alpha(color2)\n\n  w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2\n  w2 = 1 - w1\n\n  channels = (red(color1) red(color2)) (green(color1) green(color2)) (blue(color1) blue(color2))\n  rgb = ()\n\n  for pair in channels\n    push(rgb, floor(pair[0] * w1 + pair[1] * w2))\n\n  a1 = alpha(color1) * p\n  a2 = alpha(color2) * (1 - p)\n  alpha = a1 + a2\n\n  rgba(rgb[0], rgb[1], rgb[2], alpha)\n\n// invert colors, leave alpha intact\n\ninvert(color = '')\n  if color is a 'color'\n    rgba(#fff - color, alpha(color))\n  else\n    unquote( \"invert(\" + color + \")\" )\n\n// give complement of the given color\n\ncomplement( color )\n  spin( color, 180 )\n\n// give grayscale of the given color\n\ngrayscale( color = '' )\n  if color is a 'color'\n    desaturate( color, 100% )\n  else\n    unquote( \"grayscale(\" + color + \")\" )\n\n// mix the given color with white\n\ntint( color, percent )\n  mix( white, color, percent )\n\n// mix the given color with black\n\nshade( color, percent )\n  mix( black, color, percent )\n\n// return the last value in the given expr\n\nlast(expr)\n  expr[length(expr) - 1]\n\n// return keys in the given pairs or object\n\nkeys(pairs)\n  ret = ()\n  if type(pairs) == 'object'\n    for key in pairs\n      push(ret, key)\n  else\n    for pair in pairs\n      push(ret, pair[0]);\n  ret\n\n// return values in the given pairs or object\n\nvalues(pairs)\n  ret = ()\n  if type(pairs) == 'object'\n    for key, val in pairs\n      push(ret, val)\n  else\n    for pair in pairs\n      push(ret, pair[1]);\n  ret\n\n// join values with the given delimiter\n\njoin(delim, vals...)\n  buf = ''\n  vals = vals[0] if length(vals) == 1\n  for val, i in vals\n    buf += i ? delim + val : val\n\n// add a CSS rule to the containing block\n\n// - This definition allows add-property to be used as a mixin\n// - It has the same effect as interpolation but allows users\n//   to opt for a functional style\n\nadd-property-function = add-property\nadd-property(name, expr)\n  if mixin\n    {name} expr\n  else\n    add-property-function(name, expr)\n\nprefix-classes(prefix)\n  -prefix-classes(prefix, block)\n\n// Caching mixin, use inside your functions to enable caching by extending.\n\n$stylus_mixin_cache = {}\ncache()\n  $key = (current-media() or 'no-media') + '__' + called-from[0] + '__' + arguments\n  if $key in $stylus_mixin_cache\n    @extend {\"$cache_placeholder_for_\" + $stylus_mixin_cache[$key]}\n  else if 'cache' in called-from\n    {block}\n  else\n    $id = length($stylus_mixin_cache)\n\n    &,\n    /$cache_placeholder_for_{$id}\n      $stylus_mixin_cache[$key] = $id\n      {block}\n\n// Percentage function to convert a number, e.g. \".45\", into a percentage, e.g. \"45%\"\n\npercentage(num)\n  return unit(num * 100, '%')\n\n// Returns the position of a `value` within a `list`\n\nindex(list, value)\n  for val, i in list\n    return i if val == value\n"]}